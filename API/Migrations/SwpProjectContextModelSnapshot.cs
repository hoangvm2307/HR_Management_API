// <auto-generated />
using System;
using API.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(SwpProjectContext))]
    partial class SwpProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Entities.Allowance", b =>
                {
                    b.Property<int>("AllowanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("allowanceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllowanceId"));

                    b.Property<int?>("AllowanceSalary")
                        .HasColumnType("int")
                        .HasColumnName("allowanceSalary");

                    b.Property<int?>("AllowanceTypeId")
                        .HasColumnType("int")
                        .HasColumnName("allowanceTypeId");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int")
                        .HasColumnName("contractId");

                    b.HasKey("AllowanceId")
                        .HasName("PK_Allowance_allowanceId");

                    b.HasIndex("AllowanceTypeId");

                    b.HasIndex("ContractId");

                    b.ToTable("Allowance", (string)null);
                });

            modelBuilder.Entity("API.Entities.AllowanceType", b =>
                {
                    b.Property<int>("AllowanceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("allowanceTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllowanceTypeId"));

                    b.Property<string>("AllowanceDetailSalary")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("allowanceDetailSalary");

                    b.Property<string>("AllowanceName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("allowanceName");

                    b.HasKey("AllowanceTypeId")
                        .HasName("PK_AllowanceType_allowanceTypeId");

                    b.ToTable("AllowanceType", (string)null);
                });

            modelBuilder.Entity("API.Entities.Candidate", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("candidateId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CandidateId"));

                    b.Property<string>("Address")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("address");

                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("date")
                        .HasColumnName("applyDate");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasColumnName("department")
                        .IsFixedLength();

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasColumnName("email")
                        .IsFixedLength();

                    b.Property<int?>("ExpectedSalary")
                        .HasColumnType("int")
                        .HasColumnName("expectedSalary");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("gender");

                    b.Property<string>("ImageFile")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("imageFile");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("phone")
                        .IsFixedLength();

                    b.Property<string>("Result")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("result");

                    b.Property<string>("ResumeFile")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("resumeFile");

                    b.HasKey("CandidateId")
                        .HasName("PK_Candidate_candidateId");

                    b.ToTable("Candidate", (string)null);
                });

            modelBuilder.Entity("API.Entities.CandidateSkill", b =>
                {
                    b.Property<int>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("uniqueId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniqueId"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("int")
                        .HasColumnName("candidateId");

                    b.Property<string>("Level")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("level");

                    b.Property<int>("SkillId")
                        .HasColumnType("int")
                        .HasColumnName("skillId");

                    b.HasKey("UniqueId")
                        .HasName("PK_CandidateSkill_uniqueId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("SkillId");

                    b.ToTable("CandidateSkill", (string)null);
                });

            modelBuilder.Entity("API.Entities.ContractType", b =>
                {
                    b.Property<int>("ContractTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("contractTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractTypeId"));

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("name");

                    b.HasKey("ContractTypeId")
                        .HasName("PK_ContractType_contractTypeId");

                    b.ToTable("ContractType", (string)null);
                });

            modelBuilder.Entity("API.Entities.DateDimension", b =>
                {
                    b.Property<int>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("uniqueId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniqueId"));

                    b.Property<int>("IsWeekend")
                        .HasColumnType("int");

                    b.Property<string>("Style101")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<DateTime?>("TheDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<int?>("TheDay")
                        .HasColumnType("int");

                    b.Property<string>("TheDayName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("TheDayOfWeek")
                        .HasColumnType("int");

                    b.Property<byte?>("TheDayOfWeekInMonth")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("TheFirstOfMonth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("TheFirstOfYear")
                        .HasColumnType("date");

                    b.Property<int?>("TheMonth")
                        .HasColumnType("int");

                    b.Property<string>("TheMonthName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("TheQuarter")
                        .HasColumnType("int");

                    b.Property<int?>("TheWeek")
                        .HasColumnType("int");

                    b.Property<int?>("TheYear")
                        .HasColumnType("int");

                    b.HasKey("UniqueId")
                        .HasName("PK__DateDime__AA552EF373208D78");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("UniqueId"), false);

                    b.HasIndex(new[] { "TheDate" }, "PK_DateDimension")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "TheDate" }, "PK_DateDimension"));

                    b.ToTable("DateDimension", (string)null);
                });

            modelBuilder.Entity("API.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("departmentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasColumnName("departmentName");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("DepartmentId")
                        .HasName("PK_Department_departmentId");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("API.Entities.HolidayDimension", b =>
                {
                    b.Property<string>("HolidayText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("TheDate")
                        .HasColumnType("date");

                    b.HasIndex(new[] { "TheDate" }, "CIX_HolidayDimension");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "TheDate" }, "CIX_HolidayDimension"));

                    b.ToTable("HolidayDimension", (string)null);
                });

            modelBuilder.Entity("API.Entities.LeaveDayDetail", b =>
                {
                    b.Property<int>("LeaveDayDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("leaveDayDetailId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaveDayDetailId"));

                    b.Property<DateTime?>("ChangeAt")
                        .HasColumnType("datetime")
                        .HasColumnName("changeAt");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createAt");

                    b.Property<int?>("DayLeft")
                        .HasColumnType("int")
                        .HasColumnName("dayLeft");

                    b.Property<int?>("LeaveTypeId")
                        .HasColumnType("int")
                        .HasColumnName("leaveTypeId");

                    b.Property<int?>("ResponseId")
                        .HasColumnType("int")
                        .HasColumnName("responseId");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staffId");

                    b.Property<int?>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("LeaveDayDetailId")
                        .HasName("PK_LeaveDayDetail_leaveDayDetailId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("StaffId");

                    b.ToTable("LeaveDayDetail", (string)null);
                });

            modelBuilder.Entity("API.Entities.LeaveType", b =>
                {
                    b.Property<int>("LeaveTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("leaveTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaveTypeId"));

                    b.Property<bool?>("IsSalary")
                        .HasColumnType("bit")
                        .HasColumnName("isSalary");

                    b.Property<int?>("LeaveTypeDay")
                        .HasColumnType("int")
                        .HasColumnName("leaveTypeDay");

                    b.Property<string>("LeaveTypeDetail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("leaveTypeDetail");

                    b.Property<string>("LeaveTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("leaveTypeName");

                    b.HasKey("LeaveTypeId")
                        .HasName("PK_LeaveType_leaveTypeId");

                    b.ToTable("LeaveType", (string)null);
                });

            modelBuilder.Entity("API.Entities.LogLeave", b =>
                {
                    b.Property<int>("LeaveLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("leaveLogId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaveLogId"));

                    b.Property<int?>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("ChangeStatusTime")
                        .HasColumnType("datetime")
                        .HasColumnName("changeStatusTime");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createAt");

                    b.Property<string>("Description")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("description");

                    b.Property<bool?>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("enable");

                    b.Property<double?>("LeaveDays")
                        .HasColumnType("float")
                        .HasColumnName("leaveDays");

                    b.Property<DateTime>("LeaveEnd")
                        .HasColumnType("date")
                        .HasColumnName("leaveEnd");

                    b.Property<int?>("LeaveHours")
                        .HasColumnType("int")
                        .HasColumnName("leaveHours");

                    b.Property<DateTime>("LeaveStart")
                        .HasColumnType("date")
                        .HasColumnName("leaveStart");

                    b.Property<int?>("LeaveTypeId")
                        .HasColumnType("int")
                        .HasColumnName("leaveTypeId");

                    b.Property<string>("ProcessNote")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("processNote");

                    b.Property<int?>("RespondencesId")
                        .HasColumnType("int")
                        .HasColumnName("respondencesId");

                    b.Property<int?>("SalaryPerDay")
                        .HasColumnType("int")
                        .HasColumnName("salaryPerDay");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staffId");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.HasKey("LeaveLogId")
                        .HasName("PK_LogLeave_leaveLogId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("StaffId");

                    b.ToTable("LogLeave", (string)null);
                });

            modelBuilder.Entity("API.Entities.LogOt", b =>
                {
                    b.Property<int>("OtLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("otLogId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OtLogId"));

                    b.Property<int?>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("ChangeStatusTime")
                        .HasColumnType("datetime")
                        .HasColumnName("changeStatusTime");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createAt");

                    b.Property<int?>("Days")
                        .HasColumnType("int")
                        .HasColumnName("days");

                    b.Property<bool?>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("enable");

                    b.Property<DateTime>("LogEnd")
                        .HasColumnType("datetime")
                        .HasColumnName("logEnd");

                    b.Property<double>("LogHours")
                        .HasColumnType("float")
                        .HasColumnName("logHours");

                    b.Property<DateTime>("LogStart")
                        .HasColumnType("datetime")
                        .HasColumnName("logStart");

                    b.Property<int?>("OtTypeId")
                        .HasColumnType("int")
                        .HasColumnName("otTypeId");

                    b.Property<string>("ProcessNote")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("processNote");

                    b.Property<string>("Reason")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("reason");

                    b.Property<int?>("RespondencesId")
                        .HasColumnType("int")
                        .HasColumnName("respondencesId");

                    b.Property<int?>("SalaryPerDay")
                        .HasColumnType("int")
                        .HasColumnName("salaryPerDay");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staffId");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.HasKey("OtLogId")
                        .HasName("PK_LogOT_otLogId");

                    b.HasIndex("OtTypeId");

                    b.HasIndex("StaffId");

                    b.ToTable("LogOT", (string)null);
                });

            modelBuilder.Entity("API.Entities.OtType", b =>
                {
                    b.Property<int>("OtTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("otTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OtTypeId"));

                    b.Property<string>("TypeName")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasColumnName("typeName");

                    b.Property<double?>("TypePercentage")
                        .HasColumnType("float")
                        .HasColumnName("typePercentage");

                    b.HasKey("OtTypeId")
                        .HasName("PK_OtType_otTypeId");

                    b.ToTable("OtType", (string)null);
                });

            modelBuilder.Entity("API.Entities.Payslip", b =>
                {
                    b.Property<int>("PayslipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payslipId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayslipId"));

                    b.Property<double?>("ActualWorkDays")
                        .HasColumnType("float")
                        .HasColumnName("actualWorkDays");

                    b.Property<int?>("Bhtncomp")
                        .HasColumnType("int")
                        .HasColumnName("BHTNComp");

                    b.Property<int?>("Bhtnemp")
                        .HasColumnType("int")
                        .HasColumnName("BHTNEmp");

                    b.Property<int?>("Bhxhcomp")
                        .HasColumnType("int")
                        .HasColumnName("BHXHComp");

                    b.Property<int?>("Bhxhemp")
                        .HasColumnType("int")
                        .HasColumnName("BHXHEmp");

                    b.Property<int?>("Bhytcomp")
                        .HasColumnType("int")
                        .HasColumnName("BHYTComp");

                    b.Property<int?>("Bhytemp")
                        .HasColumnType("int")
                        .HasColumnName("BHYTEmp");

                    b.Property<DateTime?>("ChangeAt")
                        .HasColumnType("date")
                        .HasColumnName("changeAt");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("date")
                        .HasColumnName("createAt");

                    b.Property<int?>("FamilyDeduction")
                        .HasColumnType("int")
                        .HasColumnName("familyDeduction");

                    b.Property<int?>("GrossActualSalary")
                        .HasColumnType("int")
                        .HasColumnName("grossActualSalary");

                    b.Property<int?>("GrossStandardSalary")
                        .HasColumnType("int")
                        .HasColumnName("grossStandardSalary");

                    b.Property<double?>("LeaveDays")
                        .HasColumnType("float")
                        .HasColumnName("leaveDays");

                    b.Property<double?>("LeaveHours")
                        .HasColumnType("float")
                        .HasColumnName("leaveHours");

                    b.Property<int?>("NetActualSalary")
                        .HasColumnType("int")
                        .HasColumnName("netActualSalary");

                    b.Property<int?>("NetStandardSalary")
                        .HasColumnType("int")
                        .HasColumnName("netStandardSalary");

                    b.Property<int?>("OtTotal")
                        .HasColumnType("int")
                        .HasColumnName("otTotal");

                    b.Property<int>("PaidByDate")
                        .HasColumnType("int")
                        .HasColumnName("paidByDate");

                    b.Property<bool?>("PayslipStatus")
                        .HasColumnType("bit")
                        .HasColumnName("payslipStatus");

                    b.Property<int?>("PersonalIncomeTax")
                        .HasColumnType("int")
                        .HasColumnName("personalIncomeTax");

                    b.Property<int?>("SalaryBeforeTax")
                        .HasColumnType("int")
                        .HasColumnName("salaryBeforeTax");

                    b.Property<int?>("SalaryRecieved")
                        .HasColumnType("int")
                        .HasColumnName("salaryRecieved");

                    b.Property<int?>("SelfDeduction")
                        .HasColumnType("int")
                        .HasColumnName("selfDeduction");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staffId");

                    b.Property<double?>("StandardWorkDays")
                        .HasColumnType("float")
                        .HasColumnName("standardWorkDays");

                    b.Property<int?>("TaxableSalary")
                        .HasColumnType("int")
                        .HasColumnName("taxableSalary");

                    b.Property<int?>("TotalAllowance")
                        .HasColumnType("int")
                        .HasColumnName("totalAllowance");

                    b.Property<int?>("TotalCompInsured")
                        .HasColumnType("int")
                        .HasColumnName("totalCompInsured");

                    b.Property<int?>("TotalCompPaid")
                        .HasColumnType("int")
                        .HasColumnName("totalCompPaid");

                    b.HasKey("PayslipId")
                        .HasName("PK_Payslip_payslipId");

                    b.HasIndex("StaffId");

                    b.ToTable("Payslip", (string)null);
                });

            modelBuilder.Entity("API.Entities.PersonnelContract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("contractId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"));

                    b.Property<DateTime?>("ChangeAt")
                        .HasColumnType("date")
                        .HasColumnName("changeAt");

                    b.Property<string>("ContractFile")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("contractFile");

                    b.Property<bool>("ContractStatus")
                        .HasColumnType("bit")
                        .HasColumnName("contractStatus");

                    b.Property<int?>("ContractTypeId")
                        .HasColumnType("int")
                        .HasColumnName("contractTypeId");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("date")
                        .HasColumnName("createAt");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<int?>("NoOfDependences")
                        .HasColumnType("int")
                        .HasColumnName("noOfDependences");

                    b.Property<string>("Note")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("note");

                    b.Property<int?>("ResponseId")
                        .HasColumnType("int")
                        .HasColumnName("responseId");

                    b.Property<int>("Salary")
                        .HasColumnType("int")
                        .HasColumnName("salary");

                    b.Property<string>("SalaryType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("salaryType");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staffId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<int?>("TaxableSalary")
                        .HasColumnType("int")
                        .HasColumnName("taxableSalary");

                    b.Property<int?>("WorkDatePerWeek")
                        .HasColumnType("int")
                        .HasColumnName("workDatePerWeek");

                    b.HasKey("ContractId")
                        .HasName("PK_PersonnelContract_contractId");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("StaffId");

                    b.ToTable("PersonnelContract", (string)null);
                });

            modelBuilder.Entity("API.Entities.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("roleId")
                        .IsFixedLength();

                    b.Property<string>("RoleName")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("roleName");

                    b.HasKey("RoleId")
                        .HasName("PK_Role_roleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("API.Entities.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("skillId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillId"));

                    b.Property<string>("SkillName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("skillName");

                    b.HasKey("SkillId")
                        .HasName("PK_Skill_skillId");

                    b.ToTable("Skill", (string)null);
                });

            modelBuilder.Entity("API.Entities.StaffSkill", b =>
                {
                    b.Property<int>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("uniqueId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniqueId"));

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("level");

                    b.Property<int>("SkillId")
                        .HasColumnType("int")
                        .HasColumnName("skillId");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staffId");

                    b.HasKey("UniqueId")
                        .HasName("PK_StaffSkill_uniqueId");

                    b.HasIndex("SkillId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffSkill", (string)null);
                });

            modelBuilder.Entity("API.Entities.TaxDetail", b =>
                {
                    b.Property<int>("TaxDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("taxDetailId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaxDetailId"));

                    b.Property<int?>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<int?>("PayslipId")
                        .HasColumnType("int")
                        .HasColumnName("payslipId");

                    b.Property<int?>("TaxLevel")
                        .HasColumnType("int")
                        .HasColumnName("taxLevel");

                    b.HasKey("TaxDetailId")
                        .HasName("PK_TaxDetail_taxDetailId");

                    b.HasIndex("PayslipId");

                    b.HasIndex("TaxLevel");

                    b.ToTable("TaxDetail", (string)null);
                });

            modelBuilder.Entity("API.Entities.TaxList", b =>
                {
                    b.Property<int>("TaxLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("taxLevel");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaxLevel"));

                    b.Property<string>("Description")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("description");

                    b.Property<double?>("TaxPercentage")
                        .HasColumnType("float")
                        .HasColumnName("taxPercentage");

                    b.Property<int?>("TaxRange")
                        .HasColumnType("int")
                        .HasColumnName("taxRange");

                    b.HasKey("TaxLevel")
                        .HasName("PK_TaxList_taxLevel");

                    b.ToTable("TaxList", (string)null);
                });

            modelBuilder.Entity("API.Entities.TheCalendar", b =>
                {
                    b.Property<string>("HolidayText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("IsHoliday")
                        .HasColumnType("int");

                    b.Property<int>("IsWeekend")
                        .HasColumnType("int");

                    b.Property<int>("IsWorking")
                        .HasColumnType("int")
                        .HasColumnName("isWorking");

                    b.Property<decimal>("Percent")
                        .HasColumnType("numeric(2, 1)");

                    b.Property<string>("Style101")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<DateTime?>("TheDate")
                        .HasColumnType("date");

                    b.Property<int?>("TheDay")
                        .HasColumnType("int");

                    b.Property<string>("TheDayName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("TheDayOfWeek")
                        .HasColumnType("int");

                    b.Property<byte?>("TheDayOfWeekInMonth")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("TheFirstOfMonth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("TheFirstOfYear")
                        .HasColumnType("date");

                    b.Property<int?>("TheMonth")
                        .HasColumnType("int");

                    b.Property<string>("TheMonthName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("TheQuarter")
                        .HasColumnType("int");

                    b.Property<int?>("TheWeek")
                        .HasColumnType("int");

                    b.Property<int?>("TheYear")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("TheCalendar", (string)null);
                });

            modelBuilder.Entity("API.Entities.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ticketId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<DateTime?>("ChangeStatusTime")
                        .HasColumnType("datetime")
                        .HasColumnName("changeStatusTime");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createAt");

                    b.Property<bool?>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("enable");

                    b.Property<string>("ProcessNote")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("processNote");

                    b.Property<int?>("RespondencesId")
                        .HasColumnType("int")
                        .HasColumnName("respondencesId");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staffId");

                    b.Property<string>("TicketFile")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("ticketFile");

                    b.Property<string>("TicketReason")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ticketReason");

                    b.Property<string>("TicketStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ticketStatus");

                    b.Property<int?>("TicketTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ticketTypeId");

                    b.HasKey("TicketId")
                        .HasName("PK_Ticket_ticketId");

                    b.HasIndex("StaffId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("API.Entities.TicketType", b =>
                {
                    b.Property<int>("TicketTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ticketTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketTypeId"));

                    b.Property<string>("TicketName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ticketName");

                    b.HasKey("TicketTypeId")
                        .HasName("PK_TicketType_ticketTypeId");

                    b.ToTable("TicketType", (string)null);
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("API.Entities.UserAccount", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("password");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("roleId")
                        .IsFixedLength();

                    b.HasKey("UserId")
                        .HasName("PK_UserAccount_userId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ_UserAccount_email")
                        .IsUnique();

                    b.ToTable("UserAccount", (string)null);
                });

            modelBuilder.Entity("API.Entities.UserInfor", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("staffId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<bool?>("AccountStatus")
                        .HasColumnType("bit")
                        .HasColumnName("accountStatus");

                    b.Property<string>("Address")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("address");

                    b.Property<string>("Bank")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .HasColumnName("bank")
                        .IsFixedLength();

                    b.Property<string>("BankAccount")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("bankAccount")
                        .IsFixedLength();

                    b.Property<string>("BankAccountName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasColumnName("bankAccountName")
                        .IsFixedLength();

                    b.Property<string>("CitizenId")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("citizenId")
                        .IsFixedLength();

                    b.Property<string>("Country")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("country");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("departmentId");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("FirstName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("firstName");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("gender");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("date")
                        .HasColumnName("hireDate");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ImageFile")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("imageFile");

                    b.Property<bool?>("IsManager")
                        .HasColumnType("bit")
                        .HasColumnName("isManager");

                    b.Property<string>("LastName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("lastName");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("phone")
                        .IsFixedLength();

                    b.Property<int?>("UserAccountUserId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkTimeByYear")
                        .HasColumnType("int")
                        .HasColumnName("workTimeByYear");

                    b.HasKey("StaffId")
                        .HasName("PK_UserInfor_staffId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasFilter("[Id] IS NOT NULL");

                    b.HasIndex("UserAccountUserId");

                    b.HasIndex(new[] { "CitizenId" }, "UQ_UserInfor_citizenId")
                        .IsUnique()
                        .HasFilter("[citizenId] IS NOT NULL");

                    b.ToTable("UserInfor", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2010fdb6-a21e-4b61-a191-c6437ef93d5c",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "c6110b7f-5f25-4aa5-867f-b05715e9d121",
                            Name = "HRStaff",
                            NormalizedName = "HRSTAFF"
                        },
                        new
                        {
                            Id = "5917e8eb-5897-433c-89cc-efd0b257cfea",
                            Name = "HRManager",
                            NormalizedName = "HRMANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API.Entities.Allowance", b =>
                {
                    b.HasOne("API.Entities.AllowanceType", "AllowanceType")
                        .WithMany("Allowances")
                        .HasForeignKey("AllowanceTypeId")
                        .HasConstraintName("FK_Allowance_allowanceTypeId_allowanceTypeId");

                    b.HasOne("API.Entities.PersonnelContract", "Contract")
                        .WithMany("Allowances")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_Allowance_contractId_contractId");

                    b.Navigation("AllowanceType");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("API.Entities.CandidateSkill", b =>
                {
                    b.HasOne("API.Entities.Candidate", "Candidate")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateSkill_candidateId_candidateId");

                    b.HasOne("API.Entities.Skill", "Skill")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateSkill_skillId_skillId");

                    b.Navigation("Candidate");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("API.Entities.HolidayDimension", b =>
                {
                    b.HasOne("API.Entities.DateDimension", "TheDateNavigation")
                        .WithMany()
                        .HasForeignKey("TheDate")
                        .HasPrincipalKey("TheDate")
                        .IsRequired()
                        .HasConstraintName("FK_DateDimension");

                    b.Navigation("TheDateNavigation");
                });

            modelBuilder.Entity("API.Entities.LeaveDayDetail", b =>
                {
                    b.HasOne("API.Entities.LeaveType", "LeaveType")
                        .WithMany("LeaveDayDetails")
                        .HasForeignKey("LeaveTypeId")
                        .HasConstraintName("FK_LeaveDayDetail_leaveTypeId_leaveTypeId");

                    b.HasOne("API.Entities.UserInfor", "Staff")
                        .WithMany("LeaveDayDetails")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_LeaveDayDetail_staffId_staffId");

                    b.Navigation("LeaveType");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("API.Entities.LogLeave", b =>
                {
                    b.HasOne("API.Entities.LeaveType", "LeaveType")
                        .WithMany("LogLeaves")
                        .HasForeignKey("LeaveTypeId")
                        .HasConstraintName("FK_LogLeave_leaveTypeId_leaveTypeId");

                    b.HasOne("API.Entities.UserInfor", "Staff")
                        .WithMany("LogLeaves")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK_LogLeave_staffId_staffId");

                    b.Navigation("LeaveType");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("API.Entities.LogOt", b =>
                {
                    b.HasOne("API.Entities.OtType", "OtType")
                        .WithMany("LogOts")
                        .HasForeignKey("OtTypeId")
                        .HasConstraintName("FK_LogOT_otTypeId_otTypeId");

                    b.HasOne("API.Entities.UserInfor", "Staff")
                        .WithMany("LogOts")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK_LogOT_staffId_staffId");

                    b.Navigation("OtType");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("API.Entities.Payslip", b =>
                {
                    b.HasOne("API.Entities.UserInfor", "Staff")
                        .WithMany("Payslips")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK_Payslip_staffId_staffId");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("API.Entities.PersonnelContract", b =>
                {
                    b.HasOne("API.Entities.ContractType", "ContractType")
                        .WithMany("PersonnelContracts")
                        .HasForeignKey("ContractTypeId")
                        .HasConstraintName("FK_PersonnelContract_contractTypeId_contractTypeId");

                    b.HasOne("API.Entities.UserInfor", "Staff")
                        .WithMany("PersonnelContracts")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK_PersonnelContract_staffId_staffId");

                    b.Navigation("ContractType");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("API.Entities.StaffSkill", b =>
                {
                    b.HasOne("API.Entities.Skill", "Skill")
                        .WithMany("StaffSkills")
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("FK_StaffSkill_skillId_skillId");

                    b.HasOne("API.Entities.UserInfor", "Staff")
                        .WithMany("StaffSkills")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK_StaffSkill_staffId_staffId");

                    b.Navigation("Skill");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("API.Entities.TaxDetail", b =>
                {
                    b.HasOne("API.Entities.Payslip", "Payslip")
                        .WithMany("TaxDetails")
                        .HasForeignKey("PayslipId")
                        .HasConstraintName("FK_TaxDetail_payslipId_payslipId");

                    b.HasOne("API.Entities.TaxList", "TaxLevelNavigation")
                        .WithMany("TaxDetails")
                        .HasForeignKey("TaxLevel")
                        .HasConstraintName("FK_TaxDetail_taxLevel_taxLevel");

                    b.Navigation("Payslip");

                    b.Navigation("TaxLevelNavigation");
                });

            modelBuilder.Entity("API.Entities.Ticket", b =>
                {
                    b.HasOne("API.Entities.UserInfor", "Staff")
                        .WithMany("Tickets")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_staffId_staffId");

                    b.HasOne("API.Entities.TicketType", "TicketType")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketTypeId")
                        .HasConstraintName("FK_Ticket_ticketTypeId_ticketTypeId");

                    b.Navigation("Staff");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("API.Entities.UserAccount", b =>
                {
                    b.HasOne("API.Entities.Role", "Role")
                        .WithMany("UserAccounts")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserAccount_roleId_roleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("API.Entities.UserInfor", b =>
                {
                    b.HasOne("API.Entities.Department", "Department")
                        .WithMany("UserInfors")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_UserInfor_departmentId_departmentId");

                    b.HasOne("API.Entities.User", "User")
                        .WithOne("UserInfor")
                        .HasForeignKey("API.Entities.UserInfor", "Id")
                        .HasConstraintName("FK_UserInfor_userId_userId");

                    b.HasOne("API.Entities.UserAccount", null)
                        .WithMany("UserInfors")
                        .HasForeignKey("UserAccountUserId");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entities.AllowanceType", b =>
                {
                    b.Navigation("Allowances");
                });

            modelBuilder.Entity("API.Entities.Candidate", b =>
                {
                    b.Navigation("CandidateSkills");
                });

            modelBuilder.Entity("API.Entities.ContractType", b =>
                {
                    b.Navigation("PersonnelContracts");
                });

            modelBuilder.Entity("API.Entities.Department", b =>
                {
                    b.Navigation("UserInfors");
                });

            modelBuilder.Entity("API.Entities.LeaveType", b =>
                {
                    b.Navigation("LeaveDayDetails");

                    b.Navigation("LogLeaves");
                });

            modelBuilder.Entity("API.Entities.OtType", b =>
                {
                    b.Navigation("LogOts");
                });

            modelBuilder.Entity("API.Entities.Payslip", b =>
                {
                    b.Navigation("TaxDetails");
                });

            modelBuilder.Entity("API.Entities.PersonnelContract", b =>
                {
                    b.Navigation("Allowances");
                });

            modelBuilder.Entity("API.Entities.Role", b =>
                {
                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("API.Entities.Skill", b =>
                {
                    b.Navigation("CandidateSkills");

                    b.Navigation("StaffSkills");
                });

            modelBuilder.Entity("API.Entities.TaxList", b =>
                {
                    b.Navigation("TaxDetails");
                });

            modelBuilder.Entity("API.Entities.TicketType", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.Navigation("UserInfor")
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entities.UserAccount", b =>
                {
                    b.Navigation("UserInfors");
                });

            modelBuilder.Entity("API.Entities.UserInfor", b =>
                {
                    b.Navigation("LeaveDayDetails");

                    b.Navigation("LogLeaves");

                    b.Navigation("LogOts");

                    b.Navigation("Payslips");

                    b.Navigation("PersonnelContracts");

                    b.Navigation("StaffSkills");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
